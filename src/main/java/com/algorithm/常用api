队列 queue

PriorityQueue: Object[] 数组来实现二叉堆
ArrayQueue: Object[] 数组 + 双指针

Queue 是单端队列，只能从一端插入元素，另一端删除元素，实现上一般遵循 先进先出（FIFO） 规则。Queue 扩展了 Collection 的接口，
根据 因为容量问题而导致操作失败后处理方式的不同 可以分为两类方法: 一种在操作失败后会抛出异常，另一种则会返回特殊值。
Queue 接口抛出异常  返回特殊值
插入队尾      add(E e)    offer(E e)
删除队首      remove()    poll()
查询队首元素   element()   peek()

栈
序号	方法描述
1	boolean empty()
测试堆栈是否为空。
2	Object peek( )
查看堆栈顶部的对象，但不从堆栈中移除它。
3	Object pop( )
移除堆栈顶部的对象，并作为此函数的值返回该对象。
4	Object push(Object element)
把项压入堆栈顶部。
5	int search(Object element)
返回对象在堆栈中的位置，以 1 为基数。

位运算相关：

计算一个数字的二进制有多少1
 while(num != 0){
   	 num = num & (num-1);
    	 count++;
    }
    return count;




字符串相关：
  判断一个字符是否是数字
   Character.isDigit(char)


Arrays.copyOfRange(targetArray,from,to)  // 包含from和不包含to
str.substring(start,end);

str.reverse() // 反转字符串