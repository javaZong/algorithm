一般二叉树的问题都是在考二叉树的遍历

遍历二叉树
深度优先搜索：DFS(Depth First Search)

前序遍历  头节点 左节点 右

中序遍历  左 头 右
特点：
一定是非降序排序的
可解问题：
1、获取树的深度，
2、判断书是否是一个二叉搜索树，

后序遍历：左右头

广度优先搜索（BFS   Breadth First Search）
层序遍历
可解决问题：
1、获取书的宽度
2、判断书是否是一个完全二叉树，或者满二叉树


Morris遍历细节 时间复杂度O(N) 空间复杂度O(1)
核心思想：利用叶子节点的空闲指针，来帮助回到头节点
原则：
假设来到当前节点cur，开始时cur来到头节点位置
1)如果cur没有左孩子，cur向右移动(cur = cur.right)
2)如果cur有左孩子，找到左子树上最右的节点mostRight:
a.如果mostRight的右指针指向空，让其指向cur,然后cur向左移动(cur = cur.left)
b.如果mostRight的右指针指向cur，让其指向null然后cur向右移动(cur = cur.right)
3)cur为空时遍历停止


树型DP问题

套路使用前提：
如果题目请求目标是S规则，则求解流程可以定成以每个节点为头节点的子树在S规则下的每一个答案，并且最终答案一定在其中

递归
问左子树要信息
问右子树要信息
综合比较树节点信息，然后放回当前节点的信息
信息=Object对象，包含你所要信息（属性）

public static Object f(Node x){
if(x == null) {return new Object(xx,xxx,xx)};
视问题视情况，是否要特殊处理叶子节点
Info leftData = f(x.left);
Info rightData = f(x.right);
聚合leftData和rightData 成新的Info
return NEW Object
}
